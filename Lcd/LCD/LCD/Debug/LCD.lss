
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001149  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a97  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000023f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b2  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065b  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	8e d0       	rcall	.+284    	; 0x1d0 <main>
  b4:	a8 c0       	rjmp	.+336    	; 0x206 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_ZN5G_LCD16LCD_pulse_enableEv>:



void G_LCD::LCD_pulse_enable(void)
{
	PORT_CONTROL |= (1<<E_PIN);
  b8:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <_ZN5G_LCD16LCD_pulse_enableEv+0x4>
  c0:	00 00       	nop
	_delay_us(1);
	PORT_CONTROL &= ~(1<<E_PIN);
  c2:	c7 98       	cbi	0x18, 7	; 24
  c4:	85 e3       	ldi	r24, 0x35	; 53
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_ZN5G_LCD16LCD_pulse_enableEv+0xe>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <_ZN5G_LCD14LCD_write_dataEh>:
	_delay_us(10);
}

void G_LCD::LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= (1<<RS_PIN);
  ce:	c5 9a       	sbi	0x18, 5	; 24
	PORT_DATA = data;
  d0:	65 bb       	out	0x15, r22	; 21
	LCD_pulse_enable();
  d2:	f2 df       	rcall	.-28     	; 0xb8 <_ZN5G_LCD16LCD_pulse_enableEv>
  d4:	87 ec       	ldi	r24, 0xC7	; 199
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <_ZN5G_LCD14LCD_write_dataEh+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_ZN5G_LCD14LCD_write_dataEh+0x10>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <_ZN5G_LCD17LCD_write_commandEh>:
	_delay_us(50);
}

void G_LCD::LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(1<<RS_PIN);
  e2:	c5 98       	cbi	0x18, 5	; 24
	PORT_DATA = command;
  e4:	65 bb       	out	0x15, r22	; 21
	LCD_pulse_enable();
  e6:	e8 df       	rcall	.-48     	; 0xb8 <_ZN5G_LCD16LCD_pulse_enableEv>
  e8:	87 ec       	ldi	r24, 0xC7	; 199
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <_ZN5G_LCD17LCD_write_commandEh+0xa>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN5G_LCD17LCD_write_commandEh+0x10>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <_ZN5G_LCD9LCD_clearEv>:
	_delay_us(50);
}

void G_LCD::LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	f4 df       	rcall	.-24     	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	86 e7       	ldi	r24, 0x76	; 118
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <_ZN5G_LCD9LCD_clearEv+0xa>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN5G_LCD9LCD_clearEv+0x14>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <_ZN5G_LCD8LCD_initEv>:
	_delay_ms(30);
}

void G_LCD::LCD_init(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	81 ee       	ldi	r24, 0xE1	; 225
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <_ZN5G_LCD8LCD_initEv+0xc>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN5G_LCD8LCD_initEv+0x16>
 124:	00 00       	nop
	_delay_ms(100);
	
	DDR_DATA = 0xff;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 12a:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= (1<<RS_PIN) | (1<<RW_PIN) | (1<<E_PIN);
 12c:	87 b3       	in	r24, 0x17	; 23
 12e:	80 6e       	ori	r24, 0xE0	; 224
 130:	87 bb       	out	0x17, r24	; 23
	
	PORT_CONTROL &= ~(1 << RW_PIN);
 132:	c6 98       	cbi	0x18, 6	; 24
	LCD_write_command(COMMAND_8_BIT_MODE);
 134:	68 e3       	ldi	r22, 0x38	; 56
 136:	ce 01       	movw	r24, r28
 138:	d4 df       	rcall	.-88     	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9c e9       	ldi	r25, 0x9C	; 156
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <_ZN5G_LCD8LCD_initEv+0x30>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_ZN5G_LCD8LCD_initEv+0x36>
 144:	00 00       	nop
	_delay_ms(10);

	PORT_CONTROL &= ~(1 << RW_PIN);
 146:	c6 98       	cbi	0x18, 6	; 24
	LCD_write_command(COMMAND_8_BIT_MODE);
 148:	68 e3       	ldi	r22, 0x38	; 56
 14a:	ce 01       	movw	r24, r28
 14c:	ca df       	rcall	.-108    	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	9c e9       	ldi	r25, 0x9C	; 156
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_ZN5G_LCD8LCD_initEv+0x44>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN5G_LCD8LCD_initEv+0x4a>
 158:	00 00       	nop
	_delay_ms(10);

	PORT_CONTROL &= ~(1 << RW_PIN);
 15a:	c6 98       	cbi	0x18, 6	; 24
	LCD_write_command(COMMAND_8_BIT_MODE);
 15c:	68 e3       	ldi	r22, 0x38	; 56
 15e:	ce 01       	movw	r24, r28
 160:	c0 df       	rcall	.-128    	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <_ZN5G_LCD8LCD_initEv+0x58>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <_ZN5G_LCD8LCD_initEv+0x5e>
	_delay_ms(10);
	
	uint8_t command = 0x08 | (1<<COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 16c:	00 00       	nop
 16e:	6c e0       	ldi	r22, 0x0C	; 12
 170:	ce 01       	movw	r24, r28
	
	LCD_clear();
 172:	b7 df       	rcall	.-146    	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
 174:	ce 01       	movw	r24, r28
	
	LCD_write_command(0x06);
 176:	bf df       	rcall	.-130    	; 0xf6 <_ZN5G_LCD9LCD_clearEv>
 178:	66 e0       	ldi	r22, 0x06	; 6
 17a:	ce 01       	movw	r24, r28
 17c:	b2 df       	rcall	.-156    	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <_ZN5G_LCD16LCD_write_stringEPc>:

void G_LCD::LCD_write_string(char *string)
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	fb 01       	movw	r30, r22
	uint8_t i;
	for (i=0; string[i]; i++)
 190:	60 81       	ld	r22, Z
 192:	66 23       	and	r22, r22
 194:	61 f0       	breq	.+24     	; 0x1ae <_ZN5G_LCD16LCD_write_stringEPc+0x2a>
 196:	8f 01       	movw	r16, r30
 198:	7c 01       	movw	r14, r24
 19a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_write_data(string[i]);
 19c:	c7 01       	movw	r24, r14
 19e:	97 df       	rcall	.-210    	; 0xce <_ZN5G_LCD14LCD_write_dataEh>
}

void G_LCD::LCD_write_string(char *string)
{
	uint8_t i;
	for (i=0; string[i]; i++)
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	f8 01       	movw	r30, r16
 1a4:	ec 0f       	add	r30, r28
 1a6:	f1 1d       	adc	r31, r1
 1a8:	60 81       	ld	r22, Z
 1aa:	61 11       	cpse	r22, r1
 1ac:	f7 cf       	rjmp	.-18     	; 0x19c <_ZN5G_LCD16LCD_write_stringEPc+0x18>
	{
		LCD_write_data(string[i]);
	}
	
}
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <_ZN5G_LCD11LCD_goto_XYEhh>:
	row %= 2;
	
	uint8_t address = (0x40*row) + col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);
 1ba:	26 2f       	mov	r18, r22
 1bc:	21 70       	andi	r18, 0x01	; 1
 1be:	64 2f       	mov	r22, r20
 1c0:	6f 70       	andi	r22, 0x0F	; 15
 1c2:	30 e4       	ldi	r19, 0x40	; 64
 1c4:	23 9f       	mul	r18, r19
 1c6:	60 0d       	add	r22, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	60 58       	subi	r22, 0x80	; 128
 1cc:	8a cf       	rjmp	.-236    	; 0xe2 <_ZN5G_LCD17LCD_write_commandEh>
 1ce:	08 95       	ret

000001d0 <main>:
#include <util/delay.h>
#include "G_LCD.h"
#include <stdio.h>

int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	a0 97       	sbiw	r28, 0x20	; 32
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61


public:

G_LCD(){
	LCD_init();
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	92 df       	rcall	.-220    	; 0x10e <_ZN5G_LCD8LCD_initEv>
    G_LCD mylcd;
	char buffer[32];
	
	mylcd.LCD_clear();
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	83 df       	rcall	.-250    	; 0xf6 <_ZN5G_LCD9LCD_clearEv>
	mylcd.LCD_goto_XY(0,0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	e0 df       	rcall	.-64     	; 0x1ba <_ZN5G_LCD11LCD_goto_XYEhh>
	mylcd.LCD_write_string("HelloWolrd");
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	c0 df       	rcall	.-128    	; 0x184 <_ZN5G_LCD16LCD_write_stringEPc>
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x34>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
